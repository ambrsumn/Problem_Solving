function recur(i: number, j: number, t: number, wc: number[][], dp: number[][][]) {
    if (i === wc.length - 1 && j === wc[0].length - 1) return (i + 1) * (j + 1);
    if (i >= wc.length || j >= wc[0].length) return Number.MAX_SAFE_INTEGER;
    if (i < 0 || j < 0) return Number.MAX_SAFE_INTEGER;

    if (dp[i][j][t % 2] !== -1) return dp[i][j][t % 2];

    let ans: number;

    if (t % 2 !== 0) ans = (i + 1) * (j + 1) + Math.min(recur(i + 1, j, t + 1, wc, dp), recur(i, j + 1, t + 1, wc, dp));
    else ans = wc[i][j] + recur(i, j, t + 1, wc, dp);

    return dp[i][j][t % 2] = ans;
}

function minCost(m: number, n: number, wc: number[][]): number {

    let dp: number[][][] = Array.from({ length: m }, () => Array.from({ length: n }, () => Array.from({ length: 2 }, () => -1)));


    return recur(0, 0, 1, wc, dp);
};